//
// This file was generated by the JPA Modeler
//
package br.jus.trt23.contavinculada.entities;

import br.jus.trt23.contavinculada.constants.Constantes;
import br.jus.trt23.contavinculada.constraints.VigenciaEstritaAoContrato;
import br.jus.trt23.contavinculada.enums.EDiasComputados;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(schema = Constantes.SCHEMA)
@VigenciaEstritaAoContrato
@SequenceGenerator(name = "ID", sequenceName = "POSTODETRABALHO_SEQ", allocationSize = 1, schema=Constantes.SCHEMA)
public class PostoDeTrabalho extends EntidadeGenerica implements IEscopoRestritoAoContrato{
    @Getter
    @Setter
    @NotNull
    @ManyToOne
    private Contrato contrato;

    @Getter
    @Setter
    @NotNull
    @ManyToOne
    private CargoOuFuncao cargoOuFuncao;

    @Getter
    @Setter
    @NotNull
    @ManyToOne
    private Jornada jornada;

    @Getter
    @Setter
    @OneToMany(mappedBy = "postoDeTrabalho", cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<Alocacao> alocacoes;

    @Getter
    @Setter
    @OneToMany(mappedBy = "postoDeTrabalho")
    private List<FaturamentoItem> faturamentoItens;

    @Getter
    @Setter
    @Enumerated(EnumType.STRING)
    @ElementCollection(fetch = FetchType.EAGER)
    private Set<EDiasComputados> diasComputados;

    @Getter
    @Setter
    private String responsavelTecnico;

    @Getter
    @Setter
    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH, CascadeType.PERSIST})
    private List<Salario> remuneracoes;

    //TODO: incluir um script que permita liberar o preenchimento de feriadoCalendario
    //se o item n√£o estiver em diasComputados
    @Getter
    @Setter
    @ManyToOne(cascade = {CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
    private CalendarioFeriado feriadoCalendario;

    public PostoDeTrabalho() {
        this.alocacoes = new ArrayList<>();
        this.faturamentoItens = new ArrayList<>();
        this.diasComputados = new HashSet<>();
        this.remuneracoes = new ArrayList<>();
    }

    public void addAlocacoes(Alocacao alocacao) {
        if(alocacoes.contains(alocacao)) return;
        alocacoes.add(alocacao);
        alocacao.setPostoDeTrabalho(this);
    }

    public void addFaturamentoItens(FaturamentoItem faturamentoIt) {
        if(alocacoes.contains(faturamentoIt)) return;        
        faturamentoItens.add(faturamentoIt);
        faturamentoIt.setPostoDeTrabalho(this);
    }

    public void addDiasComputados(EDiasComputados eDiasComputados) {
        diasComputados.add(eDiasComputados);
    }

    public void addRemuneracaoes(Salario salario) {
        remuneracoes.add(salario);
    }

    @Override
    public String toString() {
        return getCargoOuFuncao().getNome().concat(" - " + getJornada().getNome() + " (" + getId().toString() + ")");
    }

    @Override
    public String getNomeNatural() {
        return "Posto de trabalho";
    }
}
