//
// This file was generated by the JPA Modeler
//
package br.jus.trt23.contavinculada.entities;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

@Entity
public class Retencao extends EntidadeGenerica {

    protected final static String[] uniqueIndex = {"faturamento", "colaborador", "aliquota"};

    public Retencao() {
        this.faturamentoItens = new ArrayList<>();
    }

    @Getter
    @Setter
    @NotNull
    @OneToMany(mappedBy = "retencao",
            cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<FaturamentoItem> faturamentoItens;

    @Getter
    @Setter
    @NotNull
    @ManyToOne
    private Colaborador colaborador;

    @Getter
    @Setter
    @NotNull
    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private RATItem ratItem;

    @Getter
    @Setter
    @NotNull
    private Double salario;

    @Getter
    @Setter
    private Integer diasSubstituicao;

    @Getter
    @Setter
    private Integer diasTitularidade;

    @Transient
    private Double fatorTrabalhadoNoPeriodo;

    @Transient
    private Integer diasNoPeriodo;

    @Transient
    private Double retido;

    @Getter
    @Setter
    @OneToOne(mappedBy = "retencao")
    private Liberacao liberacao;

    public Double getRetido() throws Exception {
        return ratItem.getAliquota() * salario * getFatorTrabalhadoNoPeriodo();
    }

    public Integer getDiasNoPeriodo() throws Exception {
        if (null == diasNoPeriodo) {
            if (faturamentoItens.size() > 0) {
                diasNoPeriodo = faturamentoItens.get(0).getFaturamento().getDiasEntreReferencias();
            } else {
                throw new Exception("Não há faturamento associado à retenção.");
            }
        }
        return diasNoPeriodo;
    }

    public Double getFatorTrabalhadoNoPeriodo() throws Exception {
        if (null == fatorTrabalhadoNoPeriodo) {
            fatorTrabalhadoNoPeriodo = (diasSubstituicao.doubleValue() + diasTitularidade.doubleValue()) / getDiasNoPeriodo().doubleValue();
        }
        return fatorTrabalhadoNoPeriodo;
    }
}
