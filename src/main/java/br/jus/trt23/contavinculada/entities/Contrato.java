//
// This file was generated by the JPA Modeler
//
package br.jus.trt23.contavinculada.entities;

import java.time.LocalDate;
import java.util.Set;
import java.util.TreeSet;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.validator.constraints.NotEmpty;

@Entity
@Table(
    uniqueConstraints = 
            @UniqueConstraint(columnNames={"vigenteDesde", "vigenteAte", "numero"})            
)
public class Contrato extends EntidadeGenerica {
    protected final static String[] uniqueIndex = {"numero"};
    @Getter
    @Setter
    @NotEmpty
    private String numero;

    @Getter
    @Setter    
    @ManyToOne
    private Contrato aditivoDe;

    @Getter
    @Setter
    @NotNull
    @ManyToOne(targetEntity = Pessoa.class)
    @JoinColumn(nullable=false)        
    private Pessoa contratado;

    @Getter
    @Setter
    @NotEmpty
    private String objeto;

    @Getter
    @Setter
    @NotNull
    private LocalDate assinaturaData;

    @Getter
    @Setter
    @Lob
    private Byte[] inteiroTeor;

    @Getter
    @Setter
    @NotNull
    private String processo;

    @Getter
    @Setter
    private String arp;

    @Getter
    @Setter
    private String regimeTributacao;
    
    @OneToMany(mappedBy = "contrato", cascade={CascadeType.MERGE,CascadeType.PERSIST})
    private Set<ContaVinculada> contasVinculadas;

    @OneToMany(mappedBy = "contrato" ,cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
    private Set<PostoDeTrabalho> postosDeTrabalho;

    @OneToMany(cascade = {CascadeType.MERGE,CascadeType.PERSIST})
    private Set<Faturamento> faturamentos;

    @OneToMany(mappedBy = "aditivoDe", cascade = {CascadeType.MERGE,CascadeType.PERSIST})
    private Set<Contrato> aditivos;

    @OneToMany(mappedBy = "contrato", cascade = {CascadeType.PERSIST,CascadeType.MERGE}  )
    private Set<Fiscal> fiscais;

    @OneToMany(mappedBy = "contrato", cascade = {CascadeType.MERGE,CascadeType.PERSIST})
    private Set<EncargoAliquota> aliquotas;

    @Getter
    @Setter
    private String situacao;

    public Contrato() {
        this.contasVinculadas = new TreeSet<>();
        this.postosDeTrabalho = new TreeSet<>();
        this.faturamentos = new TreeSet<>();
        this.aditivos = new TreeSet<>();
        this.fiscais = new TreeSet<>();
        this.aliquotas = new TreeSet<>();
    }
    
    

    public Set<ContaVinculada> getContasVinculadas() {
        return new TreeSet<>(contasVinculadas);
    }
    
    public void AddContasVinculadas(ContaVinculada conta){
        contasVinculadas.add(conta);
    }

    public Set<PostoDeTrabalho> getPostosDeTrabalho() {
        return new TreeSet<>(postosDeTrabalho);
    }
    
    public void addPostosDeTrabalho(PostoDeTrabalho posto){
        postosDeTrabalho.add(posto);
        posto.setContrato(this);
    }

    public Set<Faturamento> getFaturamentos() {
        return new TreeSet<>(faturamentos);
    }
    
    public void addFaturamentos(Faturamento faturamento){
        faturamentos.add(faturamento);
        faturamento.setContrato(this);
    }

    public Set<Contrato> getAditivos() {
        return new TreeSet<>(aditivos);
    }
    
    public void addAditivos(Contrato aditivo){
        aditivos.add(aditivo);
        aditivo.setAditivoDe(this);
    }

    public Set<Fiscal> getFiscais() {
        return new TreeSet<>(fiscais);
    }
    
    public void addFiscais(Fiscal fiscal){
        fiscais.add(fiscal);
        fiscal.setContrato(this);
    }

    public Set<EncargoAliquota> getAliquotas() {
        return new TreeSet<>(aliquotas);
    }
    
    public void addAliquotas(EncargoAliquota aliquota){
        aliquotas.add(aliquota);
        aliquota.setContrato(this);
    }
    
    
    
    @Override
    public String toString(){
        if(null != getAditivoDe()){
            return getNumero() + "/" + getAditivoDe();
        }
        else{
            return getNumero();
        }
    }
}
